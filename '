#ifndef _MY_LINK_LIST_
#define _MY_LINK_LIST_

#include <iostream>
#include <assert.h>
typedef bool (* FCMP)(const void* a, const void* b);

template <typename T>
struct listNode{
	T data;
	struct listNode* next;
	struct listNode* prev;
	listNode(){
		data = 0;
		next = nullptr;
		prev = nullptr;
	}
};

bool default_cmp(const void* a, const void* b){
	return *(int *)a < *(int *)b;
}

template <typename T>
class linkList{
public:
	linkList();
	~linkList();
	bool pushHead(T element);
	bool pushTail(T element);
	bool popHead();
	bool popTail();
	int size();
	bool clear();
	bool insert(const int position, T element);
	bool remove(const int position);
	bool isEmpty();
	int findElement(const T element);
	bool getValue(const int position, T* pdata);
	bool sort(int begin=0, int end, bool descending=false, FCMP cmp=default_cmp);

private:
	int count;
	struct listNode<T>* head;
	struct listNode<T>* tail;
};

/************ definition begin ************/

template <typename T>
linkList<T>::linkList(){
	count = 0;
	head = nullptr;
	tail = nullptr;
}

template <typename T>
linkList<T>::~linkList(){
	clear();
}

template <typename T>
bool linkList<T>::pushHead(T element){
	struct listNode<T>* tmpNode;
	try{
		tmpNode = new listNode<T>;
	} catch(const std::bad_alloc& e) {
		return false;
	}
	tmpNode->data = element;
	if (head == nullptr){
		head = tmpNode;
		tail = tmpNode;
	} else {
		tmpNode->next = head;
		head->prev = tmpNode;
		head = tmpNode;	
	}
	count++;
	return true;
}

template <typename T>
bool linkList<T>::pushTail(T element){
	struct listNode<T>* tmpNode;
	try{
		tmpNode = new listNode<T>;
	} catch(const std::bad_alloc& e) {
		return false;
	}
	tmpNode->data = element;
	if (tail == nullptr){
		head = tmpNode;
		tail = tmpNode;
	} else {
		tmpNode->prev = tail;
		tail->next = tmpNode;
		tail = tmpNode;
	}
	count++;
	return true;
}

template <typename T>
bool linkList<T>::popHead(){
	if (head == nullptr)
		return false;
	if (head == tail){
		delete head;
		tail = nullptr;
		head = nullptr;
		count--;
		return true;
	} 
	struct listNode<T>* tmp = head->next;	
	delete head;
	head = tmp;
	head->prev = nullptr;
	count--;	
	return true;
}

template <typename T>
bool linkList<T>::popTail(){
	if (tail == nullptr)
		return false;
	if (head == tail){
		delete tail;
		tail = nullptr;
		head = nullptr;
		count--;
		return true;
	}
	struct listNode<T>* tmp = tail->prev;
	delete tail;
	tail = tmp;
	tail->next = nullptr;
	count--;
	return true;
}

template <typename T>
int linkList<T>::size(){
	assert(count >= 0);
	return count;
}

template <typename T>
bool linkList<T>::clear(){
	while(popTail()){
		continue;
	}	
	if(head == nullptr && tail == nullptr){
		count = 0;
		return true;
	} else {
		return false;
	}
}

template <typename T>
bool linkList<T>::insert(const int position, T element){
	if(position < 0 || position > size()){
		std::cerr<<"[ERROR] position is out of limit"<<std::endl;
		return false;	
	}
	if(position == 0){
		return pushHead(element);
	}
	if(position == size()){
		return pushTail(element);
	} 
	int cnt = 1;
	struct listNode<T>* tmp = head; 
	while(cnt != position){
		tmp = tmp->next;
		cnt++;
	}	
	struct listNode<T>* newNode = new struct listNode<T>;
	newNode->data = element;
	newNode->next = tmp->next;
	newNode->prev = tmp;
	newNode->next->prev = newNode;
	tmp->next = newNode;
	count++;
	return true;
}

template <typename T>
bool linkList<T>::remove(const int position){
	if(position < 0 || position >= size()){
		std::cerr<<"[ERROR] position is out of limit"<<std::endl;
		return false;	
	}	
	if(position == 0){
		return popHead();
	} 
	if (position == size()-1){
		return popTail();
	}
	int cnt = 0;
	struct listNode<T>* tmp = head;
	while(cnt != position){
		tmp = tmp->next;
		cnt++;
	}
	tmp->prev->next = tmp->next;
	tmp->next->prev = tmp->prev;
	delete tmp;
	tmp = nullptr;
	count--;
	return true;
}

template <typename T>
bool linkList<T>::isEmpty(){
	return size() == 0;
}

template <typename T>
int linkList<T>::findElement(const T element){
	struct listNode<T>* tmp = head;
	int cnt = 0;
	while(tmp != nullptr){
		if(tmp->data == element)
			return cnt;
		tmp = tmp->next;
		cnt++;
	}
	return -1;
}

template <typename T>
bool linkList<T>::getValue(const int position, T* pdata){
	if(position < 0 || position >= size()){
		return false;
	}
	struct listNode<T>* tmp;
	if(position < size()/2){
		tmp = head;
		int cnt = 0;
		while(cnt != position){
			tmp = tmp->next;
		}	
		*pdata = tmp->data;
		return true;
	} else {
		tmp = tail;
		int s = size();
		int cnt = size() - 1;
		while(cnt != position){
			tmp = tmp->prev;
			cnt--;
		}
		*pdata = tmp->data;
		return true;
	}
}

#endif
